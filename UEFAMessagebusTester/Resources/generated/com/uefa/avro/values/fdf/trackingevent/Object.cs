// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.7.7.5
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace com.uefa.avro.values.fdf.trackingevent
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	public partial class Object : ISpecificRecord
	{
		public static Schema _SCHEMA = Schema.Parse(@"{""type"":""record"",""name"":""Object"",""namespace"":""com.uefa.avro.values.fdf.trackingevent"",""fields"":[{""name"":""ID"",""doc"":""Integer containing the id of the object, and null for the ball"",""default"":null,""type"":[""null"",""int""]},{""name"":""Type"",""doc"":""Integer containing the id of the object type (3-ball, 2-referee,1-player)"",""type"":""int""},{""name"":""X"",""doc"":""X coordinate referred to the object position (decimal, with up to 6 digit after comma)"",""type"":""float""},{""name"":""Y"",""doc"":""Y coordinate referred to the object position (decimal, with up to 6 digit after comma)"",""type"":""float""},{""name"":""Z"",""doc"":""Z coordinate referred to the object position (decimal, with up to 6 digit after comma)"",""type"":""float""},{""name"":""TeamID"",""doc"":""The id of the team, null if it's the ball, or referee"",""default"":null,""type"":[""null"",""int""]}]}");
		/// <summary>
		/// Integer containing the id of the object, and null for the ball
		/// </summary>
		private System.Nullable<int> _ID;
		/// <summary>
		/// Integer containing the id of the object type (3-ball, 2-referee,1-player)
		/// </summary>
		private int _Type;
		/// <summary>
		/// X coordinate referred to the object position (decimal, with up to 6 digit after comma)
		/// </summary>
		private float _X;
		/// <summary>
		/// Y coordinate referred to the object position (decimal, with up to 6 digit after comma)
		/// </summary>
		private float _Y;
		/// <summary>
		/// Z coordinate referred to the object position (decimal, with up to 6 digit after comma)
		/// </summary>
		private float _Z;
		/// <summary>
		/// The id of the team, null if it's the ball, or referee
		/// </summary>
		private System.Nullable<int> _TeamID;
		public virtual Schema Schema
		{
			get
			{
				return Object._SCHEMA;
			}
		}
		/// <summary>
		/// Integer containing the id of the object, and null for the ball
		/// </summary>
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				this._ID = value;
			}
		}
		/// <summary>
		/// Integer containing the id of the object type (3-ball, 2-referee,1-player)
		/// </summary>
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				this._Type = value;
			}
		}
		/// <summary>
		/// X coordinate referred to the object position (decimal, with up to 6 digit after comma)
		/// </summary>
		public float X
		{
			get
			{
				return this._X;
			}
			set
			{
				this._X = value;
			}
		}
		/// <summary>
		/// Y coordinate referred to the object position (decimal, with up to 6 digit after comma)
		/// </summary>
		public float Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				this._Y = value;
			}
		}
		/// <summary>
		/// Z coordinate referred to the object position (decimal, with up to 6 digit after comma)
		/// </summary>
		public float Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				this._Z = value;
			}
		}
		/// <summary>
		/// The id of the team, null if it's the ball, or referee
		/// </summary>
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				this._TeamID = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.ID;
			case 1: return this.Type;
			case 2: return this.X;
			case 3: return this.Y;
			case 4: return this.Z;
			case 5: return this.TeamID;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.ID = (System.Nullable<int>)fieldValue; break;
			case 1: this.Type = (System.Int32)fieldValue; break;
			case 2: this.X = (System.Single)fieldValue; break;
			case 3: this.Y = (System.Single)fieldValue; break;
			case 4: this.Z = (System.Single)fieldValue; break;
			case 5: this.TeamID = (System.Nullable<int>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
