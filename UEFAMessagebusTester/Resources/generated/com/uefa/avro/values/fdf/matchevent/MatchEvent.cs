// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.7.7.5
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace com.uefa.avro.values.fdf.matchevent
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	public partial class MatchEvent : ISpecificRecord
	{
		public static Schema _SCHEMA = Schema.Parse("{\"type\":\"record\",\"name\":\"MatchEvent\",\"namespace\":\"com.uefa.avro.values.fdf.matche" +
				"vent\",\"fields\":[{\"name\":\"Operation\",\"doc\":\"Mandtory string value: Add, Update or" +
				" Delete\",\"type\":{\"type\":\"enum\",\"name\":\"Operation\",\"namespace\":\"com.uefa.avro.val" +
				"ues.fdf.matchevent\",\"symbols\":[\"Add\",\"Update\",\"Delete\"]}},{\"name\":\"EventId\",\"doc" +
				"\":\"Mandatory unique id integer referencing the event\",\"type\":\"int\"},{\"name\":\"Mat" +
				"chId\",\"doc\":\"Mandatory unique id integer referencing the match\",\"type\":\"int\"},{\"" +
				"name\":\"PhaseId\",\"doc\":\"Mandatory unique id integer referencing the match phase w" +
				"hen the event occurs\",\"type\":{\"type\":\"enum\",\"name\":\"Phase\",\"namespace\":\"com.uefa" +
				".avro.values.fdf.matchevent\",\"symbols\":[\"a1\",\"a2\"]}},{\"name\":\"Type\",\"doc\":\"Manda" +
				"tory enumerated value specifyng the kind of the event\",\"type\":{\"type\":\"enum\",\"na" +
				"me\":\"Type\",\"namespace\":\"com.uefa.avro.values.fdf.matchevent\",\"symbols\":[\"Goal\",\"" +
				"Assist\",\"YellowCard\",\"RedCard\",\"Substitution\",\"Penalty\",\"StartTime\",\"EndTime\",\"P" +
				"auseTime\",\"ResumeTime\",\"Suspension\",\"EndMatch\",\"Shot\",\"BigChance\",\"FreeKick\",\"Of" +
				"fside\",\"Corner\",\"Save\",\"Foul\",\"TossCoin\",\"Dribbling\",\"Skill\",\"Tackle\",\"DroppedBa" +
				"ll\",\"ThrowIn\",\"Clearance\",\"AerialDuel\",\"BallOut\",\"Punch\",\"Claim\",\"TimeOut\"]}},{\"" +
				"name\":\"Attributes\",\"doc\":\"Optional List of enumerated values describing the even" +
				"t\",\"default\":null,\"type\":{\"type\":\"array\",\"items\":{\"type\":\"enum\",\"name\":\"Attribut" +
				"es\",\"namespace\":\"com.uefa.avro.values.fdf.matchevent\",\"symbols\":[\"BreakTime\",\"Ow" +
				"nGoal\",\"Wrong\",\"Blocked\",\"OffTarget\",\"OnBar\",\"OnPost\",\"OnTarget\",\"Overhead\",\"Fre" +
				"eKick\",\"Direct\",\"Indirect\",\"CausingPenalty\",\"Goalkeeper\",\"Handball\",\"Cross\",\"Kic" +
				"koff\",\"Short\",\"Medium\",\"Long\",\"GoalkeeperKick\",\"Successful\",\"Failed\",\"Dangerous\"" +
				",\"OrganizedAttack\",\"Left\",\"Center\",\"Right\",\"Simulation\",\"High\",\"Low\",\"Shot\",\"Big" +
				"Chance\",\"YellowCard\",\"PenaltyShootOut\",\"SecondPenalty\"]}}},{\"name\":\"TeamFromId\"," +
				"\"doc\":\"Optional unique id integer referencing the team doing the specific action" +
				"\",\"default\":null,\"type\":\"int\"},{\"name\":\"TeamToId\",\"doc\":\"Optional unique id inte" +
				"ger referencing the team being subject to the specific action\",\"default\":null,\"t" +
				"ype\":\"int\"},{\"name\":\"PlayerFromId\",\"doc\":\"Optional unique id integer referencing" +
				" the player doing the specific action.\",\"default\":null,\"type\":\"int\"},{\"name\":\"Pl" +
				"ayerToId\",\"doc\":\"Optional unique id integer referencing the player being subject" +
				" to the specific action\",\"default\":null,\"type\":\"int\"},{\"name\":\"TimeUTC\",\"doc\":\"M" +
				"andatory date of the event\",\"type\":\"string\"},{\"name\":\"Minute\",\"doc\":\"Mandatory I" +
				"nteger containing the minute of the event\",\"type\":\"int\"},{\"name\":\"Second\",\"doc\":" +
				"\"Optional Integer containing the second of the event\",\"default\":null,\"type\":\"int" +
				"\"},{\"name\":\"InjuryMinute\",\"doc\":\"Optional Integer containing the injury minute o" +
				"f the event\",\"default\":null,\"type\":\"int\"},{\"name\":\"PositionX\",\"doc\":\"Optional X " +
				"coordinate referred to the event position (decimal, with up to 6 digit after com" +
				"ma)\",\"default\":null,\"type\":[\"null\",\"float\"]},{\"name\":\"PositionY\",\"doc\":\"Optional" +
				" Y coordinate referred to the event position (decimal, with up to 6 digit after " +
				"comma)\",\"default\":null,\"type\":[\"null\",\"float\"]},{\"name\":\"GoalGatePositionX\",\"doc" +
				"\":\"Optional X coordinate referred to the goal gate position (decimal, with up to" +
				" 6 digit after comma)\",\"default\":null,\"type\":[\"null\",\"float\"]},{\"name\":\"GoalGate" +
				"PositionY\",\"doc\":\"Optional Y coordinate referred to the goal gate position (deci" +
				"mal, with up to 6 digit after comma)\",\"default\":null,\"type\":[\"null\",\"float\"]},{\"" +
				"name\":\"GoalGatePositionZ\",\"doc\":\"Optional Z coordinate referred to the goal gate" +
				" position (decimal, with up to 6 digit after comma)\",\"default\":null,\"type\":[\"nul" +
				"l\",\"float\"]}]}");
		/// <summary>
		/// Mandtory string value: Add, Update or Delete
		/// </summary>
		private com.uefa.avro.values.fdf.matchevent.Operation _Operation;
		/// <summary>
		/// Mandatory unique id integer referencing the event
		/// </summary>
		private int _EventId;
		/// <summary>
		/// Mandatory unique id integer referencing the match
		/// </summary>
		private int _MatchId;
		/// <summary>
		/// Mandatory unique id integer referencing the match phase when the event occurs
		/// </summary>
		private com.uefa.avro.values.fdf.matchevent.Phase _PhaseId;
		/// <summary>
		/// Mandatory enumerated value specifyng the kind of the event
		/// </summary>
		private com.uefa.avro.values.fdf.matchevent.Type _Type;
		/// <summary>
		/// Optional List of enumerated values describing the event
		/// </summary>
		private IList<com.uefa.avro.values.fdf.matchevent.Attributes> _Attributes;
		/// <summary>
		/// Optional unique id integer referencing the team doing the specific action
		/// </summary>
		private int _TeamFromId;
		/// <summary>
		/// Optional unique id integer referencing the team being subject to the specific action
		/// </summary>
		private int _TeamToId;
		/// <summary>
		/// Optional unique id integer referencing the player doing the specific action.
		/// </summary>
		private int _PlayerFromId;
		/// <summary>
		/// Optional unique id integer referencing the player being subject to the specific action
		/// </summary>
		private int _PlayerToId;
		/// <summary>
		/// Mandatory date of the event
		/// </summary>
		private string _TimeUTC;
		/// <summary>
		/// Mandatory Integer containing the minute of the event
		/// </summary>
		private int _Minute;
		/// <summary>
		/// Optional Integer containing the second of the event
		/// </summary>
		private int _Second;
		/// <summary>
		/// Optional Integer containing the injury minute of the event
		/// </summary>
		private int _InjuryMinute;
		/// <summary>
		/// Optional X coordinate referred to the event position (decimal, with up to 6 digit after comma)
		/// </summary>
		private System.Nullable<float> _PositionX;
		/// <summary>
		/// Optional Y coordinate referred to the event position (decimal, with up to 6 digit after comma)
		/// </summary>
		private System.Nullable<float> _PositionY;
		/// <summary>
		/// Optional X coordinate referred to the goal gate position (decimal, with up to 6 digit after comma)
		/// </summary>
		private System.Nullable<float> _GoalGatePositionX;
		/// <summary>
		/// Optional Y coordinate referred to the goal gate position (decimal, with up to 6 digit after comma)
		/// </summary>
		private System.Nullable<float> _GoalGatePositionY;
		/// <summary>
		/// Optional Z coordinate referred to the goal gate position (decimal, with up to 6 digit after comma)
		/// </summary>
		private System.Nullable<float> _GoalGatePositionZ;
		public virtual Schema Schema
		{
			get
			{
				return MatchEvent._SCHEMA;
			}
		}
		/// <summary>
		/// Mandtory string value: Add, Update or Delete
		/// </summary>
		public com.uefa.avro.values.fdf.matchevent.Operation Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				this._Operation = value;
			}
		}
		/// <summary>
		/// Mandatory unique id integer referencing the event
		/// </summary>
		public int EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				this._EventId = value;
			}
		}
		/// <summary>
		/// Mandatory unique id integer referencing the match
		/// </summary>
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				this._MatchId = value;
			}
		}
		/// <summary>
		/// Mandatory unique id integer referencing the match phase when the event occurs
		/// </summary>
		public com.uefa.avro.values.fdf.matchevent.Phase PhaseId
		{
			get
			{
				return this._PhaseId;
			}
			set
			{
				this._PhaseId = value;
			}
		}
		/// <summary>
		/// Mandatory enumerated value specifyng the kind of the event
		/// </summary>
		public com.uefa.avro.values.fdf.matchevent.Type Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				this._Type = value;
			}
		}
		/// <summary>
		/// Optional List of enumerated values describing the event
		/// </summary>
		public IList<com.uefa.avro.values.fdf.matchevent.Attributes> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes = value;
			}
		}
		/// <summary>
		/// Optional unique id integer referencing the team doing the specific action
		/// </summary>
		public int TeamFromId
		{
			get
			{
				return this._TeamFromId;
			}
			set
			{
				this._TeamFromId = value;
			}
		}
		/// <summary>
		/// Optional unique id integer referencing the team being subject to the specific action
		/// </summary>
		public int TeamToId
		{
			get
			{
				return this._TeamToId;
			}
			set
			{
				this._TeamToId = value;
			}
		}
		/// <summary>
		/// Optional unique id integer referencing the player doing the specific action.
		/// </summary>
		public int PlayerFromId
		{
			get
			{
				return this._PlayerFromId;
			}
			set
			{
				this._PlayerFromId = value;
			}
		}
		/// <summary>
		/// Optional unique id integer referencing the player being subject to the specific action
		/// </summary>
		public int PlayerToId
		{
			get
			{
				return this._PlayerToId;
			}
			set
			{
				this._PlayerToId = value;
			}
		}
		/// <summary>
		/// Mandatory date of the event
		/// </summary>
		public string TimeUTC
		{
			get
			{
				return this._TimeUTC;
			}
			set
			{
				this._TimeUTC = value;
			}
		}
		/// <summary>
		/// Mandatory Integer containing the minute of the event
		/// </summary>
		public int Minute
		{
			get
			{
				return this._Minute;
			}
			set
			{
				this._Minute = value;
			}
		}
		/// <summary>
		/// Optional Integer containing the second of the event
		/// </summary>
		public int Second
		{
			get
			{
				return this._Second;
			}
			set
			{
				this._Second = value;
			}
		}
		/// <summary>
		/// Optional Integer containing the injury minute of the event
		/// </summary>
		public int InjuryMinute
		{
			get
			{
				return this._InjuryMinute;
			}
			set
			{
				this._InjuryMinute = value;
			}
		}
		/// <summary>
		/// Optional X coordinate referred to the event position (decimal, with up to 6 digit after comma)
		/// </summary>
		public System.Nullable<float> PositionX
		{
			get
			{
				return this._PositionX;
			}
			set
			{
				this._PositionX = value;
			}
		}
		/// <summary>
		/// Optional Y coordinate referred to the event position (decimal, with up to 6 digit after comma)
		/// </summary>
		public System.Nullable<float> PositionY
		{
			get
			{
				return this._PositionY;
			}
			set
			{
				this._PositionY = value;
			}
		}
		/// <summary>
		/// Optional X coordinate referred to the goal gate position (decimal, with up to 6 digit after comma)
		/// </summary>
		public System.Nullable<float> GoalGatePositionX
		{
			get
			{
				return this._GoalGatePositionX;
			}
			set
			{
				this._GoalGatePositionX = value;
			}
		}
		/// <summary>
		/// Optional Y coordinate referred to the goal gate position (decimal, with up to 6 digit after comma)
		/// </summary>
		public System.Nullable<float> GoalGatePositionY
		{
			get
			{
				return this._GoalGatePositionY;
			}
			set
			{
				this._GoalGatePositionY = value;
			}
		}
		/// <summary>
		/// Optional Z coordinate referred to the goal gate position (decimal, with up to 6 digit after comma)
		/// </summary>
		public System.Nullable<float> GoalGatePositionZ
		{
			get
			{
				return this._GoalGatePositionZ;
			}
			set
			{
				this._GoalGatePositionZ = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.Operation;
			case 1: return this.EventId;
			case 2: return this.MatchId;
			case 3: return this.PhaseId;
			case 4: return this.Type;
			case 5: return this.Attributes;
			case 6: return this.TeamFromId;
			case 7: return this.TeamToId;
			case 8: return this.PlayerFromId;
			case 9: return this.PlayerToId;
			case 10: return this.TimeUTC;
			case 11: return this.Minute;
			case 12: return this.Second;
			case 13: return this.InjuryMinute;
			case 14: return this.PositionX;
			case 15: return this.PositionY;
			case 16: return this.GoalGatePositionX;
			case 17: return this.GoalGatePositionY;
			case 18: return this.GoalGatePositionZ;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.Operation = (com.uefa.avro.values.fdf.matchevent.Operation)fieldValue; break;
			case 1: this.EventId = (System.Int32)fieldValue; break;
			case 2: this.MatchId = (System.Int32)fieldValue; break;
			case 3: this.PhaseId = (com.uefa.avro.values.fdf.matchevent.Phase)fieldValue; break;
			case 4: this.Type = (com.uefa.avro.values.fdf.matchevent.Type)fieldValue; break;
			case 5: this.Attributes = (IList<com.uefa.avro.values.fdf.matchevent.Attributes>)fieldValue; break;
			case 6: this.TeamFromId = (System.Int32)fieldValue; break;
			case 7: this.TeamToId = (System.Int32)fieldValue; break;
			case 8: this.PlayerFromId = (System.Int32)fieldValue; break;
			case 9: this.PlayerToId = (System.Int32)fieldValue; break;
			case 10: this.TimeUTC = (System.String)fieldValue; break;
			case 11: this.Minute = (System.Int32)fieldValue; break;
			case 12: this.Second = (System.Int32)fieldValue; break;
			case 13: this.InjuryMinute = (System.Int32)fieldValue; break;
			case 14: this.PositionX = (System.Nullable<float>)fieldValue; break;
			case 15: this.PositionY = (System.Nullable<float>)fieldValue; break;
			case 16: this.GoalGatePositionX = (System.Nullable<float>)fieldValue; break;
			case 17: this.GoalGatePositionY = (System.Nullable<float>)fieldValue; break;
			case 18: this.GoalGatePositionZ = (System.Nullable<float>)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
